name: "Frigate NVR with AI Detection"
description: "AI-powered network video recorder with object detection using Coral TPU, Hailo, or CPU inference"
category: "security"
priority: "high"
version: "0.13.2"
homepage: "https://frigate.video"

# System requirements (optimized for Pi + AI accelerator)
requirements:
  ports: [5000, 1935, 8554, 8555]
  memory_gb: 2  # More with AI processing
  disk_gb: 100  # For video storage
  cpu_cores: 4  # Pi 4+ recommended
  dependencies:
    - docker
  hardware:
    recommended: ["Coral Edge TPU", "Hailo-8", "Intel Neural Compute Stick"]
    optional: ["Pi Camera Module", "USB Cameras"]

# Default configuration
default_port: 5000
default_config:
  storage_path: "/opt/frigate/storage"
  config_path: "/opt/frigate/config"
  detector_type: "cpu"  # Will auto-detect accelerator
  record_retention_days: 7

# Installation method
installation:
  method: "docker-compose"
  docker_compose:
    version: "3.8"
    services:
      frigate:
        container_name: "frigate"
        privileged: true  # For hardware access
        restart: "unless-stopped"
        image: "ghcr.io/blakeblackshear/frigate:stable"
        shm_size: "128mb"  # Shared memory for processing
        environment:
          - "FRIGATE_RTSP_PASSWORD=changeme"
          - "TZ=America/New_York"
        devices:
          # Auto-detect and map AI accelerators
          - "/dev/bus/usb:/dev/bus/usb"  # USB devices (Coral USB, Neural Compute Stick)
          - "/dev/dma_heap:/dev/dma_heap"  # DMA heap for hardware acceleration
          - "/dev/dri:/dev/dri"  # GPU acceleration
          # Pi Camera access
          - "/dev/video0:/dev/video0"
          - "/dev/video1:/dev/video1"
        volumes:
          - "/opt/frigate/config:/config"
          - "/opt/frigate/storage:/media/frigate"
          - "/etc/localtime:/etc/localtime:ro"
          # Coral TPU edge case mapping
          - "/dev/apex_0:/dev/apex_0"  # Coral M.2/mPCIe
        ports:
          - "5000:5000"    # Web UI
          - "8554:8554"    # RTSP
          - "8555:8555/tcp"  # WebRTC
          - "1935:1935"    # RTMP
        networks:
          - frigate-network
      
      # Optional: MQTT broker for Home Assistant integration
      mosquitto:
        container_name: "frigate-mqtt"
        image: "eclipse-mosquitto:2"
        restart: "unless-stopped"
        ports:
          - "1883:1883"
        volumes:
          - "/opt/frigate/mosquitto:/mosquitto/config"
        networks:
          - frigate-network
    
    networks:
      frigate-network:
        driver: bridge

# AI Accelerator detection and configuration
ai_accelerators:
  coral_edge_tpu:
    usb_version:
      detection: "lsusb | grep '18d1:9302'"
      device_path: "/dev/bus/usb"
      config: |
        detectors:
          coral:
            type: edgetpu
            device: usb
    
    pcie_version:
      detection: "ls /dev/apex_*"
      device_path: "/dev/apex_0"
      config: |
        detectors:
          coral:
            type: edgetpu
            device: pci
  
  hailo_8:
    detection: "lsusb | grep '1e60:'"  # Hailo vendor ID
    device_path: "/dev/hailo0"
    config: |
      detectors:
        hailo:
          type: hailo
          device: /dev/hailo0
  
  intel_ncs:
    detection: "lsusb | grep '03e7:'"  # Intel vendor ID
    device_path: "/dev/bus/usb"
    config: |
      detectors:
        openvino:
          type: openvino
          device: MYRIAD
  
  cpu_fallback:
    always_available: true
    config: |
      detectors:
        cpu:
          type: cpu
          num_threads: 3

# Camera configuration examples
camera_configs:
  pi_camera:
    description: "Raspberry Pi Camera Module"
    config: |
      cameras:
        pi_camera:
          ffmpeg:
            inputs:
              - path: /dev/video0
                input_args: -f v4l2 -video_size 1280x720 -framerate 30
                roles:
                  - detect
                  - record
          detect:
            width: 1280
            height: 720
            fps: 5
  
  usb_camera:
    description: "USB webcam"
    config: |
      cameras:
        usb_camera:
          ffmpeg:
            inputs:
              - path: /dev/video1
                input_args: -f v4l2 -video_size 640x480 -framerate 15
                roles:
                  - detect
          detect:
            width: 640
            height: 480
            fps: 5
  
  rtsp_camera:
    description: "Network IP camera"
    config: |
      cameras:
        ip_camera:
          ffmpeg:
            inputs:
              - path: rtsp://admin:password@192.168.1.100:554/stream1
                roles:
                  - detect
                  - record
          detect:
            width: 1920
            height: 1080
            fps: 5

# Object detection configuration
object_detection:
  default_objects:
    - person
    - car
    - truck
    - bicycle
    - motorcycle
    - dog
    - cat
    - bird
  
  zones_example:
    config: |
      cameras:
        front_door:
          zones:
            front_yard:
              coordinates: 0,461,3,0,1053,0,1920,843,1920,1080,0,1080
              objects:
                - person
                - car
            driveway:
              coordinates: 1053,0,1920,0,1920,843
              objects:
                - car
                - truck
  
  motion_masks:
    description: "Mask areas to ignore (trees, flags, etc.)"
    config: |
      cameras:
        backyard:
          motion:
            mask:
              - 0,900,1080,900,1080,1920,0,1920  # Bottom third
              - 200,0,400,0,400,200,200,200      # Top left corner

# Performance optimization for Pi + AI accelerator
performance_tuning:
  coral_tpu_optimized:
    config: |
      # Frigate config optimized for Coral TPU
      model:
        width: 320
        height: 320
        input_tensor: nhwc
        input_pixel_format: rgb
        path: /edgetpu_model.tflite
        labelmap_path: /labelmap.txt
      
      detect:
        fps: 5  # Reduced for Pi CPU
        max_disappeared: 25
      
      objects:
        track:
          - person
          - car
        filters:
          person:
            min_area: 5000
            max_area: 100000
            threshold: 0.7
  
  cpu_optimized:
    config: |
      # CPU-only fallback configuration
      model:
        width: 320
        height: 320
        input_tensor: nhwc
        input_pixel_format: rgb
        path: /cpu_model.tflite
      
      detect:
        fps: 2  # Very conservative for CPU
        max_disappeared: 25

# Post-installation setup
post_install:
  initial_setup:
    - "Access Frigate web UI at http://{hostname}:5000"
    - "Check AI accelerator detection in System page"
    - "Configure cameras in /opt/frigate/config/config.yml"
    - "Test object detection with live view"
    - "Set up recording schedules and retention"
  
  ai_accelerator_verification:
    - "Check detected accelerator: docker logs frigate | grep -i 'detector'"
    - "Verify inference speed: Look for 'detection_fps' in stats"
    - "Monitor CPU usage with and without accelerator"
    - "Test different models for optimal performance"
  
  camera_calibration:
    - "Adjust detection zones for optimal coverage"
    - "Set motion masks to ignore false positives"
    - "Configure object filters (size, confidence)"
    - "Test day/night detection quality"

# Integration with Home Assistant
home_assistant_integration:
  mqtt_setup:
    config: |
      # Add to Home Assistant configuration.yaml
      mqtt:
        sensor:
          - name: "Front Door Person Count"
            state_topic: "frigate/front_door/person"
            value_template: "{{ value_json.count }}"
        
        camera:
          - name: "Front Door Camera"
            topic: "frigate/front_door/snapshot"
        
        binary_sensor:
          - name: "Front Door Motion"
            state_topic: "frigate/front_door/motion"
            payload_on: "ON"
            payload_off: "OFF"
  
  automation_examples:
    person_detection: |
      automation:
        - alias: "Person at Front Door"
          trigger:
            platform: mqtt
            topic: frigate/front_door/person
          condition:
            condition: template
            value_template: "{{ trigger.payload_json.count > 0 }}"
          action:
            - service: notify.mobile_app
              data:
                message: "Person detected at front door"
                data:
                  image: "http://frigate:5000/api/front_door/latest.jpg"

# Storage and backup
storage_management:
  retention_policy:
    config: |
      record:
        enabled: True
        retain:
          days: 7     # Keep recordings for 7 days
          mode: all   # Record all the time
        events:
          retain:
            default: 14  # Keep events for 2 weeks
            objects:
              person: 30  # Keep person events for 1 month
  
  storage_optimization:
    - "Use fast storage (SSD) for active recordings"
    - "Configure NAS mount for long-term storage"
    - "Set up automatic cleanup of old recordings"
    - "Monitor disk usage: df -h /opt/frigate/storage"

# Advanced AI features
advanced_ai:
  custom_models:
    description: "Use custom trained models"
    yolov8_example: |
      model:
        path: /config/custom_model.tflite
        labelmap_path: /config/custom_labels.txt
        width: 640
        height: 640
  
  multi_detector:
    description: "Use multiple AI accelerators"
    config: |
      detectors:
        coral1:
          type: edgetpu
          device: usb:0
        coral2:
          type: edgetpu
          device: usb:1
      
      cameras:
        camera1:
          ffmpeg:
            inputs: [...]
          detect:
            fps: 10
          objects:
            filters:
              detector: coral1
  
  face_recognition:
    description: "Add face recognition capability"
    setup: "Requires CompreFace or similar add-on"

# Monitoring and alerts
monitoring:
  performance_metrics:
    - "Detection FPS per camera"
    - "AI accelerator utilization"
    - "Memory and CPU usage"
    - "Storage consumption rate"
  
  health_checks:
    - "Camera connectivity status"
    - "AI detector responsiveness"
    - "Recording service status"
    - "MQTT broker connectivity"
  
  alerting:
    - "Email notifications for offline cameras"
    - "Mobile push for person detection"
    - "Slack/Discord integration available"
    - "HTTP webhooks for custom alerts"

# Troubleshooting
troubleshooting:
  ai_accelerator_issues:
    - issue: "Coral TPU not detected"
      solutions:
        - "Check USB connection: lsusb | grep 18d1"
        - "Verify device permissions: ls -la /dev/bus/usb/*/'"
        - "Install libedgetpu: apt install libedgetpu1-std"
        - "Check container privileges and device mounts"
    
    - issue: "Poor detection performance"
      solutions:
        - "Verify AI accelerator is being used"
        - "Check model compatibility with hardware"
        - "Adjust detection FPS and resolution"
        - "Monitor CPU temperature: vcgencmd measure_temp"
    
    - issue: "High CPU usage with accelerator"
      solutions:
        - "Verify accelerator is properly configured"
        - "Check if falling back to CPU detection"
        - "Reduce detection area and fps"
        - "Use hardware-optimized models"

# Security considerations
security:
  network_security:
    - "Change default RTSP password"
    - "Use VPN for remote access"
    - "Isolate cameras on separate VLAN"
    - "Enable HTTPS for web interface"
  
  privacy_considerations:
    - "Configure motion masks for private areas"
    - "Set appropriate retention periods"
    - "Secure storage encryption"
    - "Access control for viewing recordings"
  
  data_protection:
    - "Local processing (no cloud required)"
    - "Encrypted storage options"
    - "Secure MQTT communication"
    - "Regular backup of configurations"

# Hardware recommendations
hardware_recommendations:
  ai_accelerators:
    coral_usb:
      price: "$60"
      performance: "13 TOPS"
      compatibility: "Excellent with Pi"
      models: "TensorFlow Lite only"
    
    coral_m2:
      price: "$70"
      performance: "13 TOPS"
      compatibility: "Requires M.2 slot"
      models: "TensorFlow Lite only"
    
    hailo_8:
      price: "$200+"
      performance: "26 TOPS"
      compatibility: "USB/PCIe versions"
      models: "ONNX, TensorFlow, PyTorch"
  
  cameras:
    pi_camera_v3:
      resolution: "12MP"
      features: "Autofocus, low light"
      price: "$35"
    
    usb_webcam:
      recommended: "Logitech C920/C930"
      resolution: "1080p"
      price: "$50-100"
    
    ip_cameras:
      budget: "Wyze Cam v3 (RTSP firmware)"
      mid_range: "Reolink RLC-410A"
      high_end: "Hikvision DS-2CD2T47G1-L"